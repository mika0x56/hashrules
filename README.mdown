
# HashRules

A simple, yet powerful, gem for building constructions for identifying contents in a string in a structured, hierarchical, manner.

## Example

Suppose you're building a system for identifying countries, regions and cities within a string. An exerpt might look like this:

```ruby
match 'united states', w(/u ?s ?a/) do
  set country: 'United States'

  match /( |^)cali/, 'ca' do
    set state: 'California'
    set region: 'West Coast'

    match 'long beach', 'longbeach' do
      set city: 'Long Beach'
    end

    match 'fontana' do
      set city: 'Fontana'
    end
  end
end
```

This simple DSL translates to a series of OR and AND statements. For example, if we were to write the exact same logic but in plain if/then/else and regexes; the path for matching all the way to 'Long Beach' would be:

```ruby
text = "Long Beach, California, United States"
text.gsub!(',','')
result = {}

if (text =~ /( |^)united states( |$)/ || text =~ /( |^)u ?s ?a( |$)/)
  result['country'] = 'United States'

  if (text =~ /( |^)cali/ || text =~ /( |^)ca( |$)/)
    result['state'] = 'California'
    result['region'] = 'West Coast'

    if (text =~ /( |^)long beach( |$)/ || text =~ /( |^)longbeach( |$)/)
      result['city'] = 'Long Beach'
    elsif text =~ /( |^)fontana( |$)/
      result['city'] = 'Fontana'
    end
  end
end
```

## Available matchers
<table>
  <tr>
    <th>Notation</th><th>Equivalence</th><th>Use case</th>
  </tr>
  <tr>
    <td>
      w(regex)
    </td>
    <td>
      /( |^)#{regex}( |$)/
    </td>
    <td>
      Create regex matching only whole words 
    </td>
  </tr>

  <tr>
    <td>
      'regex'
    </td>
    <td>
      /( |^)#{Regexp.escape(regex)}( |$)/
    </td>
    <td>
      String matching whole words. 'key' would match "I have a key" but not "monkey"
    </td>
  </tr>

  <tr>
    <td>
      no(matcher)
    </td>
    <td>
      !(matcher.success?)
    </td>
    <td>
      Inverted string or regex matcher 
    </td>
  </tr>

  <tr>
    <td>
      both(A,B)
    </td>
    <td>
      A.success? && B.success?            
    </td>
    <td>
      Logical AND of given matchers, which may be nested 
    </td>
  </tr>
</table>

## Installation

`gem install hashrules`

## Usage

```
require 'hash_rules'

rules = HashRules.new(args)

# args:
#  * folder: path to the folder containing one or more rule files (all will be read)

process_args={}
results = rules.process('Alabama, Canada', process_args)

results.each do |result|
  p result
end
```

Each result contains the following keys:

* data: This is the resulting data accumulated from the rules `set` statements
* coverage: An array of index pairs showing what part of the string was matched.
* match_id: Indicates the deepest matching rule id
* matchlevel: Indicates how deeply nested the first match was. If `max_submatch_level` is zero, this will always be 1.
* percent_coverage: A number 0 to 100 indicating how many percent of the string was matched

Process_args may be any of the following:

* max_submatch_level: Allow search to start from a nested matcher. If this value is 1, this means HashRules may skip at the very most one level. Recommended to be used with limit: -1
* limit: Stop search when this number of matches have been found. Good for performance, but not recommended if `max_submatch_level` is more than zero because results won't guarantee best match.

## License

<a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/3.0/80x15.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">HashRules</span> by <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">Mikael Wikman</span> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.
